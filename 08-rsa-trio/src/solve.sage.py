

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_100000 = Integer(100000); _sage_const_28108 = Integer(28108); _sage_const_65537 = Integer(65537); _sage_const_2048 = Integer(2048); _sage_const_1 = Integer(1); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8)
from pwn import *
import math

def clean(n):
    while n % _sage_const_2  == _sage_const_0 : n //= _sage_const_2 
    for k in range(_sage_const_3 , _sage_const_100000 , _sage_const_2 ):
        while n % k == _sage_const_0 :
            n //= k
    return n

def encrypt(r, m):
    r.sendlineafter('🤖 '.encode(), f'encrypt {m}'.encode())
    r.recvuntil('🔑 '.encode())
    return int(r.recvline())

def decrypt(r, c):
    r.sendlineafter('🤖 '.encode(), f'decrypt {c}'.encode())
    r.recvuntil('🔑 '.encode())
    return int(r.recvline())

# ~100s
def main():
    # r = process(['python3', 'chall.py'])
    r = remote('chal.hkcert23.pwnable.hk', _sage_const_28108 )

    r.recvuntil('🏁 '.encode())
    c0 = int(r.recvline())

    e = _sage_const_65537 

    m1 = _sage_const_2 **_sage_const_2048 
    c1 = encrypt(r, m1)

    c2 = c1
    m2 = decrypt(r, c2)

    p_times_q = clean(m1 - m2)

    m3 = decrypt(r, _sage_const_2 **e)

    _q = math.gcd(Integer(pow(m3, e**_sage_const_2 , p_times_q) - _sage_const_2 ), p_times_q)
    print(f'{_q = }')

    assert p_times_q % _q == _sage_const_0 
    _p = p_times_q // _q
    print(f'{_p = }')

    # m -> s -> t -> c
    s3 = Integer(pow(m3, e, _p*_q))

    u = s3**e - _sage_const_2  # <-- bottleneck 1

    s2 = Integer(pow(m2, e, _p*_q))
    v = Integer(pow(s2, e, u)) # <-- bottleneck 2
    w = Integer(pow(v, e, u)) - c2 # <-- bottleneck 3

    # u, v, w are ~2048*65537 bits long

    # XXX: sometimes gcd(u, w) = 1... not sure why yet but just reconnect
    _r = clean(gcd(u, w))
    print(f'{_r = }')

    n = _p * _q * _r
    phi = (_p-_sage_const_1 ) * (_q-_sage_const_1 ) * (_r-_sage_const_1 )
    d = int(pow(e, -_sage_const_1 , phi))
    t0 = int(pow(c0, d, _r*_p))
    s0 = int(pow(t0, d, _q*_r))
    m0 = int(pow(s0, d, _p*_q))

    flag = int.to_bytes(m0, (m0.bit_length()+_sage_const_7 )//_sage_const_8 , 'big')
    print(f'{flag = }')

if __name__ == '__main__':
    main()

